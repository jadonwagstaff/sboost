// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// adaboost
List adaboost(const NumericMatrix& features, const NumericMatrix& ordered_index, const NumericVector& outcomes, const NumericVector& categorical, int iterations);
RcppExport SEXP _sboost_adaboost(SEXP featuresSEXP, SEXP ordered_indexSEXP, SEXP outcomesSEXP, SEXP categoricalSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ordered_index(ordered_indexSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type outcomes(outcomesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type categorical(categoricalSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(adaboost(features, ordered_index, outcomes, categorical, iterations));
    return rcpp_result_gen;
END_RCPP
}
// predict
NumericVector predict(const NumericMatrix& features, const List& classifier);
RcppExport SEXP _sboost_predict(SEXP featuresSEXP, SEXP classifierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< const List& >::type classifier(classifierSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(features, classifier));
    return rcpp_result_gen;
END_RCPP
}
// assess
NumericMatrix assess(const NumericMatrix& features, const NumericVector& outcomes, const List& classifier);
RcppExport SEXP _sboost_assess(SEXP featuresSEXP, SEXP outcomesSEXP, SEXP classifierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type outcomes(outcomesSEXP);
    Rcpp::traits::input_parameter< const List& >::type classifier(classifierSEXP);
    rcpp_result_gen = Rcpp::wrap(assess(features, outcomes, classifier));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sboost_adaboost", (DL_FUNC) &_sboost_adaboost, 5},
    {"_sboost_predict", (DL_FUNC) &_sboost_predict, 2},
    {"_sboost_assess", (DL_FUNC) &_sboost_assess, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_sboost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
